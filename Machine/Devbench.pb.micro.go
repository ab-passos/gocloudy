// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/Devbench.proto

package main

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Devbench service

func NewDevbenchEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{},
		&api.Endpoint{},
	}
}

// Client API for Devbench service

type DevbenchService interface {
	Create(ctx context.Context, in *Name, opts ...client.CallOption) (*empty.Empty, error)
	Delete(ctx context.Context, in *Name, opts ...client.CallOption) (*empty.Empty, error)
}

type devbenchService struct {
	c    client.Client
	name string
}

func NewDevbenchService(name string, c client.Client) DevbenchService {
	return &devbenchService{
		c:    c,
		name: name,
	}
}

func (c *devbenchService) Create(ctx context.Context, in *Name, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "Devbench.Create", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devbenchService) Delete(ctx context.Context, in *Name, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "Devbench.Delete", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Devbench service

type DevbenchHandler interface {
	Create(context.Context, *Name, *empty.Empty) error
	Delete(context.Context, *Name, *empty.Empty) error
}

func RegisterDevbenchHandler(s server.Server, hdlr DevbenchHandler, opts ...server.HandlerOption) error {
	type devbench interface {
		Create(ctx context.Context, in *Name, out *empty.Empty) error
		Delete(ctx context.Context, in *Name, out *empty.Empty) error
	}
	type Devbench struct {
		devbench
	}
	h := &devbenchHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{}))
	return s.Handle(s.NewHandler(&Devbench{h}, opts...))
}

type devbenchHandler struct {
	DevbenchHandler
}

func (h *devbenchHandler) Create(ctx context.Context, in *Name, out *empty.Empty) error {
	return h.DevbenchHandler.Create(ctx, in, out)
}

func (h *devbenchHandler) Delete(ctx context.Context, in *Name, out *empty.Empty) error {
	return h.DevbenchHandler.Delete(ctx, in, out)
}
