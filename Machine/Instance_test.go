// Code generated by MockGen. DO NOT EDIT.
// Source: Instances.go

// Package mock_Instances is a generated GoMock package.
package main

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	"testing"
)

// MockVirtualMachineProvider is a mock of VirtualMachineProvider interface
type MockVirtualMachineProvider struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMachineProviderMockRecorder
}

// MockVirtualMachineProviderMockRecorder is the mock recorder for MockVirtualMachineProvider
type MockVirtualMachineProviderMockRecorder struct {
	mock *MockVirtualMachineProvider
}

// NewMockVirtualMachineProvider creates a new mock instance
func NewMockVirtualMachineProvider(ctrl *gomock.Controller) *MockVirtualMachineProvider {
	mock := &MockVirtualMachineProvider{ctrl: ctrl}
	mock.recorder = &MockVirtualMachineProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualMachineProvider) EXPECT() *MockVirtualMachineProviderMockRecorder {
	return m.recorder
}

// CreateVirtualMachine mocks base method
func (m *MockVirtualMachineProvider) CreateVirtualMachine(vmInstance VMInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVirtualMachine", vmInstance)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVirtualMachine indicates an expected call of CreateVirtualMachine
func (mr *MockVirtualMachineProviderMockRecorder) CreateVirtualMachine(vmInstance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualMachine", reflect.TypeOf((*MockVirtualMachineProvider)(nil).CreateVirtualMachine), vmInstance)
}

// DestroyVirtualMachine mocks base method
func (m *MockVirtualMachineProvider) DestroyVirtualMachine(vmName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyVirtualMachine", vmName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyVirtualMachine indicates an expected call of DestroyVirtualMachine
func (mr *MockVirtualMachineProviderMockRecorder) DestroyVirtualMachine(vmName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyVirtualMachine", reflect.TypeOf((*MockVirtualMachineProvider)(nil).DestroyVirtualMachine), vmName)
}

// MockVirtualMachineDatabase is a mock of VirtualMachineDatabase interface
type MockVirtualMachineDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMachineDatabaseMockRecorder
}

// MockVirtualMachineDatabaseMockRecorder is the mock recorder for MockVirtualMachineDatabase
type MockVirtualMachineDatabaseMockRecorder struct {
	mock *MockVirtualMachineDatabase
}

// NewMockVirtualMachineDatabase creates a new mock instance
func NewMockVirtualMachineDatabase(ctrl *gomock.Controller) *MockVirtualMachineDatabase {
	mock := &MockVirtualMachineDatabase{ctrl: ctrl}
	mock.recorder = &MockVirtualMachineDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualMachineDatabase) EXPECT() *MockVirtualMachineDatabaseMockRecorder {
	return m.recorder
}

// MachineExists mocks base method
func (m *MockVirtualMachineDatabase) MachineExists(VirtualMachineDetails VMDetails) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MachineExists", VirtualMachineDetails)
	ret0, _ := ret[0].(bool)
	return ret0
}

// MachineExists indicates an expected call of MachineExists
func (mr *MockVirtualMachineDatabaseMockRecorder) MachineExists(VirtualMachineDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MachineExists", reflect.TypeOf((*MockVirtualMachineDatabase)(nil).MachineExists), VirtualMachineDetails)
}


func TestDestroyVM(t *testing.T) {
	ctrl := gomock.NewController(t)
  
	defer ctrl.Finish()

	virtualMachineProviderMock := NewMockVirtualMachineProvider(ctrl)
	databaseMock := NewMockVirtualMachineDatabase(ctrl)
	virtualMachineName := "VMforTesting"

	//Expectations
	virtualMachineProviderMock.
		EXPECT().
		DestroyVirtualMachine(virtualMachineName)

	vm := NewVirtualMachine(virtualMachineProviderMock, databaseMock)
	vm.DestroyVirtualMachine(virtualMachineName)
}

func TestCreateVM(t *testing.T) {
	ctrl := gomock.NewController(t)
  
	defer ctrl.Finish()

	virtualMachineProviderMock := NewMockVirtualMachineProvider(ctrl)
	databaseMock := NewMockVirtualMachineDatabase(ctrl)
	vmInstance := VMInstance {
		DevbenchName: "DevbenchName", 
		VirtualMachineDetails: VMDetails {
			MachineType: "type", 
			Os: "os", 
			DevbenchType: "type", 
			Baseline: "baseline" }, 
		StartupScript:"startup" }

	//Expectations
	virtualMachineProviderMock.
		EXPECT().
		CreateVirtualMachine(vmInstance)
	
	databaseMock.
		EXPECT().
		MachineExists(vmInstance.VirtualMachineDetails).
		Return(true)

	vm := NewVirtualMachine(virtualMachineProviderMock, databaseMock)

	vm.CreateVirtualMachine(vmInstance)
}
