name: Go

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  generate:
    name: Generate
    runs-on: ubuntu-latest
    container: grpc/go

    steps:
    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: set-go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: protoc-gen-micro
      run: |
        GO111MODULE=on go get -u github.com/micro/protoc-gen-micro/v2

    - name: Set path
      run: |
        export PATH=$PATH:$GOPATH/bin/

    - name: Generate code
      run: |
        protoc --proto_path=$GOPATH:. --micro_out=. --go_out=. proto/Devbench.proto
    
    - name: Save generated files
      uses: actions/upload-artifact@v1
      with:
        name: generatedfiles
        path: proto/


  build-mono:
    name: Build-Mono
    runs-on: ubuntu-latest
    container: golang:latest
    needs: generate
    steps:

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    
    - name: Download math result for job 1
      uses: actions/download-artifact@v1
      with:
        name: generatedfiles
    
    - shell: bash
      run: |
        cp -f generatedfiles/Devbench.proto Mono/

    - name: Build
      run: |
        cd Mono
        go fmt $(go list ./... | grep -v /vendor/)
        go vet $(go list ./... | grep -v /vendor/)
        go test -race $(go list ./... | grep -v /vendor/)
        go build -race -ldflags "-extldflags '-static'" -o mybinary

  build-machine:
    name: Build-Machine
    runs-on: ubuntu-latest
    container: golang:latest
    needs: generate
    steps:

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    
    - name: Download math result for job 1
      uses: actions/download-artifact@v1
      with:
        name: generatedfiles
    
    - shell: bash
      run: |
        cp -f generatedfiles/* Machine/
    
    - shell: bash
      run: |
        ls -la Machine/

    - name: Build
      run: |
        cd Machine
        go fmt $(go list ./... | grep -v /vendor/)
        go vet $(go list ./... | grep -v /vendor/)
        go test -race $(go list ./... | grep -v /vendor/)
        go build -race -ldflags "-extldflags '-static'" -o mybinary
        
  build-image-mono:
    name: Build-Image-Mono
    runs-on: [ubuntu-latest]
    container: docker:latest
    needs: generate
    steps:
    
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    
    - name: Build image
      run : |
        mkdir -p ./credentials
        echo ${{ secrets.SERVICEACCOUNT }} | base64 -d > ./credentials/serviceaccount.json
        docker login -u _json_key -p "$(cat ./credentials/serviceaccount.json)" https://gcr.io
        pwd
        ls
        cd Mono
        docker build -t gcr.io/${{ secrets.PROJECT_ID }}/hello-app:v1 .
        docker push gcr.io/${{ secrets.PROJECT_ID }}/hello-app:v1
        
        
  build-image-machine:
    name: Build-Image-Machine
    runs-on: [ubuntu-latest]
    needs: generate
    steps:
    
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    
    - name: Download math result for job 1
      uses: actions/download-artifact@v1
      with:
        name: generatedfiles
    
    - shell: bash
      run: |
        cp -f generatedfiles/* Machine/
        cd Machine
        
    - name: Push image to gcr
      uses: RafikFarhad/push-to-gcr-github-action@v1
      with:
        gcloud_service_key: ${{ secrets.SERVICEACCOUNT }} 
        registry: gcr.io
        project_name: ${{ secrets.PROJECT_ID }}
        image_name: machine
  
  deploy:
    name: Deploy to kubernets
    runs-on: [ubuntu-latest]
    container: google/cloud-sdk
    needs: [build-image-mono, build-image-machine]
    steps:
         - name: Check out code into the Go module directory
           uses: actions/checkout@v2

         - name: Deploy
           run: |
             mkdir -p ./credentials
             echo ${{ secrets.SERVICEACCOUNT }} | base64 -d > ./credentials/serviceaccount.json
             gcloud auth activate-service-account --key-file ./credentials/serviceaccount.json
             cd Mono
             gcloud config set project ${{ secrets.PROJECT_ID }}
             gcloud compute instances list
             gcloud config set compute/zone us-west1
             gcloud container clusters get-credentials hello-cluster
             kubectl create secret generic my-app-sa-key --from-file ./credentials/serviceaccount.json
             kubectl get secret
             kubectl apply -f my-app.yaml   
